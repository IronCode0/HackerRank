//https://arjunpinpoint.wordpress.com/2020/12/27/project-euler-254-sums-of-digit-factorials/

/*#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
*/
#include <bits/stdc++.h>
using namespace std;

// Enter your code here. Read input from STDIN. Print output to STDOUT
string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

int ToInteger(char s) {
    if (s == '0') return 0;
    else if (s == '1') return 1;
    else if (s == '2') return 2;
    else if (s == '3') return 3;
    else if (s == '4') return 4;
    else if (s == '5') return 5;
    else if (s == '6') return 6;
    else if (s == '7') return 7;
    else if (s == '8') return 8;
    else if (s == '9') return 9;
    else return 0;
}
int factorial(int num) {
    int result = 1;
    for(int i=1; i <=num+1; i++) //i in range(1, num+1)
        result *= i;
    return result;
}

int f(int n) {
    string s=to_string(n);
    int sum=0;
    for (int k=0; k<=s.length(); k++)
        sum +=factorial(ToInteger(s[k])); 
    
    /*
    int factorial[10],temp;
    for(int i = 1; i <= 10; ++i) {
        for(int j=1; j<= i; j++)
            temp *= j;
        factorial[i] = temp;
    }
    //fact_table = [factorial(i) for i in range(10)]
    string s=to_string(n);
    int sum=0;
    for (int k=0; k<=s.length(); k++)
        sum +=factorial[s[k]];
        */
    return sum;
    //return sum([fact_table[int(i)] for i in str(n)])
}
int sf(int n) {
    string s =to_string(f(n));
    int sum = 0;
    for (int i=0; i <=s.length(); i++) {
        sum += ToInteger(s[i]);
    }
    return sum;
    
    //return sum([int(i) for i in str(f(n))])
}

int g(int i) {
    int n = 1;
    int sf_val = sf(n);
    while (sf_val != i) {
        n++;
        sf_val = sf(n);
    }
    return n;
}
// print(g(48))


int sg(int i) {
    string s =to_string(g(i));
    int sum = 0;
    for(int i=0; i <=s.length(); i++) {
        sum += ToInteger(s[i]);    //to_int_type(s[i]);
    }
    return sum;
    //return sum([int(i) for i in str(g(i))])
}

// print(sg(3))

int solve(int n, int m) {
    int sum =0;
    for(int i=1; i <=n+1; i++)
        sum +=sg(i);
    //result = sum([sg(i) for i in range(1,n+1)])
    return sum % m;
}
// print(solve(3, 1000))



int main() {
    int count,n,m;
    cin >> count;
    

    string a_temp,b_temp,a_temp_temp;
    
    
    
    for(int i=0; i <count-1; i++) {
        cin >> n;
        cin >> m;
        //vector<string> temp = split(rtrim(a_temp));
        //int a_item =stoi(temp[0]);
        //int b_item =stoi(temp[1]);
        //cout << temp[0] << " - " << a_temp << " - " << b_temp;
        cout << solve(n,m);
    } 
    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
