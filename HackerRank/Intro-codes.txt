Print 3 decimal places = printf("%#.3f",d);

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int n, q;
    cin >> n >> q;
    int** seq=new int* [n];
    
    for(int i=0; i<n; i++)
        {
        int a;
        cin >> a;
        int* b=new int [a];
        for(int j=0; j<a; j++) {
            int x;
            cin >> x;
            b[j] = x;
        }
        *(seq+i)=b;
    }

    for(int i=0; i<q; i++) {
        int r, s;
        cin >> r >> s;
        cout << seq[r][s] << endl;
    }
  
    return 0;
}


//https://www.programmingwithbasics.com/p/hackerrank-solutions.html
###############################################################

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
#include <map>
#include <algorithm>
using namespace std;

int main() {

    map<string,int>s;
    int q;
    cin >> q;
    for(int i=0; i<q; i++) {
        int t,n,m;
        cin >> t;
        switch(t) {
            case 1: {
                string name;
                int marks;
                cin >> name >> marks;
                map<string,int>::iterator itr=s.find(name);
                if (itr==s.end())
                    s.insert(make_pair(name,marks));
                else
                    itr->second += marks;
                break;
            }
            case 2: {
                string name;
                cin >> name;
                s.erase(name);
                break;
            }
            case 3: {
                string name;
                cin >> name;
                map<string,int>::iterator itr=s.find(name);
                if( itr==s.end())
                    cout << "0" << endl;
                else
                    cout << itr->second << endl;
                break;
            }
        }
    }
    return 0;

}
###############################################################
https://www.hackerrank.com/challenges/attribute-parser/forum
#include <iostream>
#include <map>
using namespace std;

map <string, string> tagMap;

void createMap(int &n, string pretag) {
    if(!n) return;
    
    string line, tag, attr, value;
    getline(cin, line);
    
    int i=1;
    if(line[i]=='/') {           // found closing tag
        while(line[i]!='>') i++;
        if(pretag.size()>(i-2))		// update tag
            tag = pretag.substr(0,pretag.size()-i+1);
        else
            tag = "";
    }
    else {                       // found opening tag
        while(line[i]!=' ' && line[i]!='>') i++;
        tag = line.substr(1,i-1);	// update tag
        if(pretag!="") tag = pretag + "." + tag;
        
        int j;
        while(line[i]!='>') { // go through attributes
            j = ++i;
            while(line[i]!=' ') i++;
            attr = line.substr(j,i-j);	// attribute name
            
            while(line[i]!='\"') i++;
            j = ++i;
            while(line[i]!='\"') i++;
            value = line.substr(j,i-j);	// attribute value
            i+= 1;
            
            tagMap[tag + "~" + attr] = value;
        }
    }
    createMap(--n, tag);
}

int main() {
    int n, q;
    cin >> n >> q;
    cin.ignore();
    createMap(n,"");
    
    string attr, value;
    while(q--) {
        getline(cin,attr);
        value = tagMap[attr];
        if(value=="") value = "Not Found!";
        cout << value << endl;
    }
    return 0;
}